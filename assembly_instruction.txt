Правила: 
- byte_encoder получает у ппользователя 2 строки: относительное или полное имя программы на языке Ассемблер и относительное или полное имя выходного файла для байт-кода. WARNING: если во втором файле была какая-то информация, она полностью сотрётся и будет заменена байт-кодами.
- каждая команда/участок памяти записывается в отдельной строке.
- 

Аргументы команд:
- регистры: AX, BX, CX, DX, EX, FX, CP.
- адреса: начинаются с символа '#', далее следует число, обозначающее адрес. Адрес - положительное число из стандартного диапозона int (4 байта со знаком). Адреса вычисляются от начала программы, начиная с 0, и находятся внутри файла с программой, если адрес находится за пределами программы, он некорректен. 
- числа: любые целые числа из диапозона стандартного int (4 байта со знаком)

Память:для хранения данных, необходимых программе требуется память, она бывает 2-хвидов.
1) для хранения символов латинского алфавита. В начале строки с такой памятью ставится символ '%'. Все следующие символы в строке будут перенесены в байт-код именно как символы и не изменят своего вида.
2) для хранения чисел. В начале строки с такой памятью ставится символ '$'. Далее следует ОДНО число в десятичной записи. Числа будут переведены в шестандцатеричный формат программой. 

- Любая программа начинается с команды IP - она обозначает сдвиг Instruction Pointer на первую инструкцию. В качестве аргумента команда принимает адрес. 
- Любая программа должна заканчиваться командой остановки STOP. У этой команды нет аргументов Команду STOP можно использовать в середине программы, чтобы прервать выполнение досрочно.

Команды:

1)MOVE - скопировать одно значение в другое.
  - Первый аргумент - источник. Может быть числом, регистром или адресом в памяти.
  - Второй аргумент - приёмник. Может быть регистром или адресом в памяти.
  - Копирование из памяти в память разрешено, но VM будет выводить предупреждения.

2)JZ - перейти к инструкции, если перед нами 0.
  - Первый аргумент - то, что нужно проверить. Может быть числом, регистром или адресом в памяти.
  - Второй аргумент - адрес, в который нужно перейти, если в первом аргументе 0. 
  - Если условие не выполнено, выполнение продолжается далее по тексту программы.
  
3)JNZ - перейти к инструкции, если перед нами НЕ 0.
  - Первый аргумент - то, что нужно проверить. Может быть числом, регистром или адресом в памяти.
  - Второй аргумент - адрес, в который нужно перейти, если в первом аргументе НЕ 0. 
  - Если в первом аргументе 0, выполнение продолжается далее по тексту программы.
  
4)STOP - остановить выполнение и безаварийно завершиться
  - У команды нет аргументов.
  
5)ADD - сложить 2 числа.
  - Первый аргумент - регистр или адрес в памяти к которому прибавляем - ПРИЁМНИК.
  - Второй аргумент - регистр, адрес или число, которое прибавляем - ИСТОЧНИК.
  - Сложение двух чисел по адресам позволяется, но выводится предупреждение
  - Результат выполнения команды будет сохранён в первый аргумент, при этом второй аргумент не изменится.
  - При сложении возможно переполнение. НЕ следует допускать значения НЕ из диапозона [-2147483648, 2147483647].

  
6)SUB - вычесть из ПЕРВОГО числа ВТОРОЕ.
  - Первый аргумент - регистр или адрес в памяти из которого вычитаем - ПРИЁМНИК.
  - Второй аргумент - регистр, адрес или число, которое вычитаем - ИСТОЧНИК.
  - Вычитание двух чисел по адресам позволяется, но выводится предупреждение.
  - Результат вычитания будет сохранён в ПЕРВОМ аргументе (уменьшаемом) - регистре или числе. Во втором аргументе останется вычитаемое.
  - При вычитании может возникнуть переполнение. НЕ следует допускать значения НЕ из диапозона [-2147483648, 2147483647].

7)INP - считать число из консоли.
  - У этой команды один аргумент: куда положить считанное число. Может быть регистром или адресом в памяти.
  - Считываем целые числа из диапозона [-2147483648, 2147483647]. Пробел считается разделителем.

8)OUT - вывести число. Выводит число в конслоь.
  - Принимает один аргумент: регистр или адрес где, лежит число.
  
9)IP - переместить указатель на текущую инструкцию. 
  - Один аргумент: адрес в памяти, в который перемещаем. Может быть использована и в середине програм в качестве безусловного перехода.

10)OUTS - вывод строки в консоль.
   - Один аргумент: адрес в памяти, где начинается строка.
   - Строка должна заканчиваться символом 00.
